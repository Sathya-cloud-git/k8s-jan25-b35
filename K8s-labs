Kuberntes Essential
============================================================
=============================================================
Lab 1: Kubernetes Operations(kops) on AWS
=============================================================

##Task 1: Launching an EC2 Instance
#create an EC2 Instance Ubuntu Server22.04 LTS (HVM), SSD Volume type t2.micro

##Task 2: Create an IAM role
Create an IAM role named "kops-admin-role" with the "AdministratorAccess" policy attached.
Now, associate the IAM role "kops-admin-role" with your EC2 instance named "kops" by following these steps: ** 
Navigate to the EC2 console and select the "kops" instance. ** Click on "Action" > "Security" > "Modify IAM role." 
** Search for the "kops-admin-role" role, select it, and click "Update IAM role."

##Now, attach the IAM kops-admin-role to your EC2 instance kops by following these steps:
1. First select EC2 instance kops.
2. Next click on Action > Security > Modify IAM role
3. Search   for kops-admin role, select it and click Update IAM role

##Task 3: Setting up a Kubernetes Cluster

sudo hostnamectl set-hostname kops
bash

create file  vi kops.sh  and copy the entire content from the kops.sh file which is present in the same link.
save the file :wq and run the command chmod 400 kops.sh 
chmod 400 kops.sh

. ./kops.sh

kops get cluster

kops validate cluster <cluster name>

kubectl get nodes

kops export kubeconfig --admin
// export KOPS_STATE_STORE=s3://

#For delete your entire cluster 
=====================================
example:  kops delete cluster --name=martuj-m1-k8s-2024-06-02-03-06.k8s.local --yes

LAB-2 creating pod
================================
Task-1  Imperative method
----------
 kubectl run test --image=nginx:latest --port 80

kubectl get pod
alias k=kubectl
k get pod
k get pod -o wide
k get nodes
k describe pod test

task-2 declarative method
-----------------------------
 vi mypod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx-container
    image: nginx


k create -f mypod.yaml
kubectl get pod
alias k=kubectl
k get pod
k get pod -o wide
k get nodes
k describe pod nginx-pod

kubectl api-resources
k get po -n kube-system
k delete pod nginx-pod
k delete pod nginx-pod
=============================================================
Task-3 ReplicaSet
----------------------------
vi nginx-rs.yaml 

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-rs
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

kubectl create -f nginx-rs.yaml
kubectl  get pods
kubectl get pod -l app=nginx
kubectl get rs nginx-rs -o wide
kubectl  describe rs nginx-rs
kubectl get pod
kubectl delete pod nginx-rs-764mq
kubectl get pod
kubectl get rs
kubectl delete rs nginx-rs
kubectl get rs
kubectl get po
=============================================================
Lab 3: Deployment
=============================================================
----------------------------------------------------------------------
Task 1: Write a Deployment yaml and Apply it
----------------------------------------------------------------------
#Create a dep-nginx.yaml using content given below

vi dep-nginx.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-dep
  labels:
    app: nginx-dep
spec:
  replicas: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-ctr
        image: nginx:1.12.2
        ports:
        - containerPort: 80



#Apply the Deployment yaml created in the previous step

kubectl apply -f dep-nginx.yaml


#View the objects created by Kubernetes, Deployment and Replica Set 

kubectl get deployments
kubectl get rs


#Access one of the Pods and view nginx version

kubectl get pods
kubectl exec -it <pod_name> -- /bin/bash


# nginx -v
# exit


-------------------------------------------------------------------------
 Task 2: Update the Deployment with a Newer Image
-------------------------------------------------------------------------

#Update the nginx image in Pod using below

kubectl set image deployment/nginx-dep nginx-ctr=nginx:1.11


#Describe the deployment and see that the old pods are replaced with newer ones

kubectl describe deployments


#Access one of the Pods and view nginx version

kubectl get pods
kubectl exec -it <pod_name> -- /bin/bash

# nginx -v
# exit



-----------------------------------------------------------------------------
Task 3: Rollback of Deployment 
-----------------------------------------------------------------------------

#View the history of Deployments

kubectl rollout history deployment/nginx-dep


#Rollback the Deployment done in the previous task

kubectl rollout undo deployment/nginx-dep --to-revision=1

kubectl get rs


#Access one of the Pods and view nginx version

kubectl get pods
kubectl exec -it <pod_name> -- /bin/bash

# nginx -v
# exit



------------------------------------------------------------------------------
Task 4: Scaling of Deployments
------------------------------------------------------------------------------

#View the number of Pod replicas created by the Deployment

kubectl get deployments
kubectl get pods


#Scale up the deployment to have 8 Pod replicas

kubectl scale deployment nginx-dep --replicas=8



#Check the Pods and deployment to and verify that the number of Pod replicas are 8

kubectl get deployments
kubectl get pods


#Scale down the deployments to 2 Pod replicas

kubectl scale deployment nginx-dep --replicas=2


#Check the Pods and deployment to and verify that the number of Pod replicas are down to 2

kubectl get deployments
kubectl get pods

-----------------------------------------------------------------------------
----------------------------------------------------------------------------
#Task 6 Cleanup the resources using below command
-----------------------------------------------------------------------------
kubectl delete -f dep-nginx.yaml

